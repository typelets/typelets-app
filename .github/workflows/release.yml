name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

  release:
    name: Release
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Check for mobile-only commits
        id: check_commits
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          echo "Commits since last tag:"
          echo "$COMMITS"

          # Count mobile commits
          HAS_MOBILE=$(echo "$COMMITS" | grep -E '\(mobile\)' | wc -l || echo "0")

          # Count non-mobile commits (excluding [skip ci] and chore(release) commits)
          HAS_NON_MOBILE=$(echo "$COMMITS" | grep -v -E '\(mobile\)' | grep -v -E '\[skip ci\]' | grep -v -E '^chore\(release\):' | grep -v -E '^chore\(mobile\):' | grep -E '.' | wc -l || echo "0")

          echo "Mobile commits: $HAS_MOBILE"
          echo "Non-mobile commits: $HAS_NON_MOBILE"

          if [ "$HAS_MOBILE" -gt 0 ] && [ "$HAS_NON_MOBILE" -eq 0 ]; then
            echo "skip_release=true" >> $GITHUB_OUTPUT
            echo "✅ Mobile-only commits detected, skipping semantic-release"
          else
            echo "skip_release=false" >> $GITHUB_OUTPUT
            echo "✅ Non-mobile commits detected, running semantic-release"
          fi

      - name: Bump mobile version only
        if: steps.check_commits.outputs.skip_release == 'true'
        run: |
          node scripts/update-mobile-version.js
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add apps/mobile/v1/package.json apps/mobile/v1/app.json apps/mobile/v1/src/constants/version.ts
          git diff --staged --quiet || git commit -m "chore(mobile): bump mobile app version [skip ci]"
          git push

      - name: Release
        id: semantic
        if: steps.check_commits.outputs.skip_release != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

