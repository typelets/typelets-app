events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    server {
        listen 8080;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;
        
        # File upload limits
        client_max_body_size 50M;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://clerk.typelets.com https://*.clerk.accounts.dev; script-src-elem 'self' https://clerk.typelets.com https://*.clerk.accounts.dev; style-src 'self' 'unsafe-inline' https://clerk.typelets.com https://fonts.googleapis.com; style-src-elem 'self' 'unsafe-inline' https://fonts.googleapis.com https://clerk.typelets.com; img-src 'self' data: https: blob:; font-src 'self' data: https://clerk.typelets.com https://fonts.gstatic.com; connect-src 'self' https://clerk.typelets.com https://*.clerk.accounts.dev wss://ws-api.typelets.com https://api.typelets.com; frame-src 'self' https://clerk.typelets.com https://*.clerk.accounts.dev https://challenges.cloudflare.com; worker-src 'self' blob:;" always;

        # === Proxy API requests to backend service ===
        location /api/ {
            proxy_pass ${BACKEND_URL}/api/;
            proxy_http_version 1.1;
            proxy_set_header Host ${BACKEND_HOST};
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # SSL/TLS settings for HTTPS upstream
            proxy_ssl_server_name on;
            proxy_ssl_name ${BACKEND_HOST};

            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # === Client-side routing (SPA fallback) ===
        location / {
            try_files $uri $uri/ /index.html;
        }

        # === Cache static assets ===
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # === Health check endpoint ===
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
